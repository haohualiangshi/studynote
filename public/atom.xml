<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苦中作乐</title>
  
  <subtitle>坚持就是胜利</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-21T06:18:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell命令行基础</title>
    <link href="http://yoursite.com/2019/02/21/shell%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/02/21/shell命令行基础/</id>
    <published>2019-02-21T06:18:48.000Z</published>
    <updated>2019-02-21T06:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="遍历文档目录"><a href="#遍历文档目录" class="headerlink" title="遍历文档目录"></a>遍历文档目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">打开文件夹</span><br><span class="line">cd filePath/fileName</span><br><span class="line">查看当前的文件目录</span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line">显示文件和目录列表</span><br><span class="line">ls</span><br><span class="line">显示所有的文件和目录</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><h4 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h4><p><strong>使用<code>-i</code>强制问询对文件的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">创建文件</span><br><span class="line">touch 文件名.文件类</span><br><span class="line"></span><br><span class="line">复制文件;cp命令需要两个参数，原对象和目标对象；</span><br><span class="line">cp source(原对象) destination(目标对象)</span><br><span class="line"></span><br><span class="line">强制问询是否覆盖存在的文件</span><br><span class="line">cp -i source(原对象) destination(目标对象)</span><br><span class="line"></span><br><span class="line">递归复制整个文件夹</span><br><span class="line">cp -R source(原对象) destination(目标对象)</span><br><span class="line"></span><br><span class="line">mv命令可以将文件和目录移动到另一个位置或者重命名</span><br><span class="line">mv oldName newName</span><br><span class="line"></span><br><span class="line">移除文件rm</span><br><span class="line">rm -i fillName</span><br></pre></td></tr></table></figure><h4 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">创建目录</span><br><span class="line">mkdir fileName</span><br><span class="line"></span><br><span class="line">想要创建多个目录和子目录。需要加入-p参数</span><br><span class="line">mkdir -p New_Dir/Sub_Dir/Under_Dir</span><br><span class="line"></span><br><span class="line">删除目录</span><br><span class="line">rmdir emptyDirName</span><br><span class="line"></span><br><span class="line">删除非空目录</span><br><span class="line">rm -r</span><br></pre></td></tr></table></figure><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">查看文件类型</span><br><span class="line">file my_file</span><br><span class="line"></span><br><span class="line">查看整个文件内容，三种不同的命令</span><br><span class="line">cat命令是显示文本文件找那个所有数据的得力工具</span><br><span class="line">cat test</span><br><span class="line"></span><br><span class="line">more命令显示文本文件</span><br><span class="line">less命令查看文件</span><br><span class="line"></span><br><span class="line">查看部分文件</span><br><span class="line">tail命令会显示文件最后几行的内容</span><br><span class="line">head命令显示文件开头内容</span><br></pre></td></tr></table></figure><h4 id="打包或者压缩文件"><a href="#打包或者压缩文件" class="headerlink" title="打包或者压缩文件"></a>打包或者压缩文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar 参数 文件目录列表(打包文件或者解压缩)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>-c</code>建立新的归档文件</li><li><code>-r</code>向归档文件末尾追加文件</li><li><code>-x</code>从归档文件中解出文件</li><li><code>-O</code>将文件解开到标准输出</li><li><code>-v</code>处理过程中相关信息</li><li><code>-f</code>对普通文件操作</li><li><code>-z</code>调用gzip来压缩归档文件，与<code>-x</code>一起用时调用gzip完成解压缩</li><li><code>-Z</code>调用compress来压缩归档文件，与<code>-x</code>一起用时调用compress完成解压缩</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip 参数 文件名.zip 目标文件名</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>-q</code>不显示压缩进度状态</li><li><code>-r</code>子目录文件全部压缩为zip</li><li><code>-e</code> 文件需要加密</li><li><code>-m</code>压缩完删除源文件</li><li><code>-o</code>设置所有压缩文件的最后修改时间为当前压缩时间</li></ul><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ol><li><p>探查进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps 参数</span><br><span class="line">打印</span><br><span class="line">  PID TTY           TIME CMD</span><br><span class="line">15829 ttys001    0:00.10 -bash</span><br></pre></td></tr></table></figure></li><li><p>挂载存储媒体</p><ol><li>mount命令；mount命令会输出当前系统上挂载的设备列表</li></ol></li><li><p>文件搜索:<code>grep</code>命令会在输入或指定的文件中查找包含匹配指定模式的字符的行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [options] pattern [file]</span><br></pre></td></tr></table></figure></li><li><p>使用<code>history</code>命令打印使用过的指令;使用<code>!!</code>然后回车就能使用刚刚用过的指令；使用<code>!数字</code>执行该数字对应的命令</p></li><li><p>alias命令创建属于自己的别名</p></li></ol><h4 id="常见的bash命令"><a href="#常见的bash命令" class="headerlink" title="常见的bash命令"></a>常见的bash命令</h4><ul><li><code>cat</code>列出指定文件的内容</li><li><code>clear</code>从终端仿真器或者虚拟控制台终端删除文本</li><li><code>cp</code>将指定文件复制到另一个位置</li><li><code>file</code>查看指定文件的文件类型</li><li><code>ls</code>列出目录内容</li><li><code>mkdir</code>在当前目录下创建指定目录</li><li><code>mv</code>重命名文件；<code>rm</code>删除指定文件；<code>rmdir</code>删除指定目录</li><li><code>pwd</code>显示当前目录</li><li><code>sudo</code>以root用户账户身份运行应用程序</li><li><code>touch</code>新建一个空文件或更新一个已有文件的时间戳</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;遍历文档目录&quot;&gt;&lt;a href=&quot;#遍历文档目录&quot; class=&quot;headerlink&quot; title=&quot;遍历文档目录&quot;&gt;&lt;/a&gt;遍历文档目录&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="shell命令行" scheme="http://yoursite.com/tags/shell%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Swift常用函数总结</title>
    <link href="http://yoursite.com/2019/02/15/Swift%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/15/Swift常用函数总结/</id>
    <published>2019-02-15T12:28:55.000Z</published>
    <updated>2019-02-15T12:54:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="获取状态栏和导航栏的高度"><a href="#获取状态栏和导航栏的高度" class="headerlink" title="获取状态栏和导航栏的高度"></a>获取状态栏和导航栏的高度</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStatusBarAndNavigationBarHeight</span><span class="params">(controller: UIViewController)</span></span>-&gt;<span class="type">Float</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> statusBarHeight=<span class="type">UIApplication</span>.shared.statusBarFrame.height</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> navigationheight = controller.navigationController?.navigationBar.frame.height <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Float</span>(statusBarHeight)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Float</span>(statusBarHeight+navigationheight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取状态栏高度"><a href="#获取状态栏高度" class="headerlink" title="获取状态栏高度"></a>获取状态栏高度</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取状态栏高度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStatusBarHeight</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">UIApplication</span>.shared.statusBarFrame.height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取导航栏的高度"><a href="#获取导航栏的高度" class="headerlink" title="获取导航栏的高度"></a>获取导航栏的高度</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取导航栏的高度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNavigationBarHeight</span><span class="params">(controller: UIViewController)</span></span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Float</span>((controller.navigationController?.navigationBar.frame.height)!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐藏多余的cell分隔线"><a href="#隐藏多余的cell分隔线" class="headerlink" title="隐藏多余的cell分隔线"></a>隐藏多余的cell分隔线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//MARK:隐藏多余的cell分割线</span><br><span class="line">func hideTableViewExtraCellLineHidden(tableView : UITableView)&#123;</span><br><span class="line">    let view = UIView()</span><br><span class="line">    view.backgroundColor = UIColor.clear</span><br><span class="line">    tableView.tableFooterView = view</span><br><span class="line">    tableView.tableHeaderView = view</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据时间戳格式化字符串"><a href="#根据时间戳格式化字符串" class="headerlink" title="根据时间戳格式化字符串"></a>根据时间戳格式化字符串</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- 根据时间戳和格式化字符串返回固定格式的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeFormat</span><span class="params">(timestamp:Double,timeFormatStr:String)</span></span> -&gt; <span class="type">String</span>&#123;</span><br><span class="line">    <span class="comment">// 将时间戳转为固定格式的时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> now = <span class="type">NSDate</span>.<span class="keyword">init</span>(timeIntervalSince1970: timestamp/<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">let</span> dateformatter = <span class="type">DateFormatter</span>()</span><br><span class="line">    dateformatter.dateFormat = timeFormatStr <span class="comment">/*"yyyy年MM月dd日 HH:mm:ss"*/</span></span><br><span class="line">    <span class="keyword">return</span> dateformatter.string(from: now <span class="keyword">as</span> <span class="type">Date</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断是否是网络URL"><a href="#判断是否是网络URL" class="headerlink" title="判断是否是网络URL"></a>判断是否是网络URL</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK:判断是否是网络图片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">isWebImage</span><span class="params">(path:String)</span></span>-&gt;<span class="type">Bool</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isWebImage:<span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(path.starts(with: <span class="string">"http://"</span>)||path.starts(with:<span class="string">"https://"</span>))&#123;</span><br><span class="line">        isWebImage=<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isWebImage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成区间内随机数（整数）"><a href="#生成区间内随机数（整数）" class="headerlink" title="生成区间内随机数（整数）"></a>生成区间内随机数（整数）</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:生成区间内随机数（整数）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomIn</span><span class="params">(<span class="built_in">min</span>:UInt32,<span class="built_in">max</span>:UInt32)</span></span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>(arc4random() % (<span class="built_in">max</span> - <span class="built_in">min</span>))  + <span class="type">Int</span>(<span class="built_in">min</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证是否是纯数字"><a href="#验证是否是纯数字" class="headerlink" title="验证是否是纯数字"></a>验证是否是纯数字</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断输入的字符串是否为数字，不含其它字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">isPurnInt</span><span class="params">(string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> scan: <span class="type">Scanner</span> = <span class="type">Scanner</span>(string: string)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> val:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> scan.scanInt(&amp;val) &amp;&amp; scan.isAtEnd</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="校验输入的是否是全数字且首位不能为0"><a href="#校验输入的是否是全数字且首位不能为0" class="headerlink" title="校验输入的是否是全数字且首位不能为0"></a>校验输入的是否是全数字且首位不能为0</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: 校验输入的是否是全数字且首位不能为0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judgeStrNotStartZero</span><span class="params">(str:String)</span></span> -&gt; <span class="type">Bool</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> regex = <span class="string">"^[0-9]+"</span>;</span><br><span class="line">    <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"SELF MATCHES %@"</span>, regex)</span><br><span class="line">    <span class="keyword">return</span> predicate.evaluate(with: str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;获取状态栏和导航栏的高度&quot;&gt;&lt;a href=&quot;#获取状态栏和导航栏的高度&quot; class=&quot;headerlink&quot; title=&quot;获取状态栏和导航栏的高度&quot;&gt;&lt;/a&gt;获取状态栏和导航栏的高度&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>fundation-01</title>
    <link href="http://yoursite.com/2018/11/25/fundation-01/"/>
    <id>http://yoursite.com/2018/11/25/fundation-01/</id>
    <published>2018-11-25T12:49:45.000Z</published>
    <updated>2018-12-06T02:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><ul><li><p>Int:有符号整数值类型</p><ul><li><p>返回指定范围内的随机值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">random</span><span class="params">(<span class="keyword">in</span> range:&lt;Range&lt;Int&gt;)</span></span>-&gt;<span class="type">Int</span></span><br><span class="line"><span class="comment">// demo;随机生成100以内的随机数</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="type">Int</span>.random(<span class="keyword">in</span>:<span class="number">1</span>..&lt;<span class="number">100</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="type">Int</span>.random(<span class="keyword">in</span>:<span class="number">1</span>...<span class="number">100</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同时计算除法的商和余数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quotientAndRemainder</span><span class="params">(dividingBy rhs:Int)</span></span> -&gt; (quotient:<span class="type">Int</span>,remainder:<span class="type">Int</span>)</span><br><span class="line"><span class="comment">//demo</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1000000</span></span><br><span class="line"><span class="keyword">let</span> (q,r) = x.quotientAndRemainder(dividingBy:<span class="type">Int</span>)<span class="comment">//q==1071;r=757</span></span><br></pre></td></tr></table></figure></li><li><p>利用系统的URLComponents获取IOS中对应结构的元素</p><ul><li><p>属性值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public var scheme:String?协议</span><br><span class="line">public var user:String?</span><br><span class="line">public var password:String?</span><br><span class="line">public var host:String?域名</span><br><span class="line">public var port:String?端口</span><br><span class="line">public var path:String?路径</span><br><span class="line">public var query:String?参数</span><br><span class="line">public var fragment:String?</span><br><span class="line">public var queryItem:[URLQueryItem]?参数集合</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h4><ul><li>使用<code>\()</code>可以快速的将其他类型转为字符串；可以使用<code>+</code>组合字符串；多行字符串使用<code>&quot;&quot;&quot;</code>三个双引号括起来</li><li>获取字符串中某一个元素的位置<code>string.firstIndex(of:&quot;&quot;)??string.endIndex</code></li><li><code>isEmpty:Bool</code>一个布尔值；表示集合是否为空；也可测试字符串是否为空；使用<code>count</code>获取字符创的长度</li><li>从文件或URL创建字符串<code>init(contentsOf:URL) 或者init(contentOfFile:String)</code>;使用<code>append(string/character)</code>将给定的字符或者字符串追加到字符串中</li><li>使用<code>insert(Character,at:String.Index)</code>将指定字符串插入到指定位置</li><li>替换子字符串<code>replaceSubrange</code></li><li>删除子字符串<ul><li><code>remove(at:String.Index) -&gt; Character</code>删除并返回指定位置的字符</li><li><code>removeAll(keepingVapacity:Bool)</code>删除所有元素</li><li><code>removeAll(where:(character) -&gt; Bool)</code>删除满足给定微词的左右元素</li></ul></li></ul></li></ul><h4 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h4><ul><li><code>hasPrefix(String)</code>返回一个布尔值；字符串是否以指定的前缀开头</li><li><code>hasSuffix(string)</code>返回一个布尔值；指示字符串是否以指定的后缀结尾</li><li><code>contains(Character)</code>返回一个布尔值；是否以指定的后缀结尾</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>集合包含：数组Array/字典Dictionary/Set无序的独特元素集合</li><li>数组：使用<code>isEmpty</code>判断数组是否为空；使用<code>first</code>和<code>last</code>属性安全访问第一个和最后一个元素的值；如果为空则为<code>nil</code></li><li><code>append(_:)</code>将单个元素添加到数组的末尾；<code>append(contentsOf:)</code>同时添加多个元素</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数字&quot;&gt;&lt;a href=&quot;#数字&quot; class=&quot;headerlink&quot; title=&quot;数字&quot;&gt;&lt;/a&gt;数字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Int:有符号整数值类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;返回指定范围内的随机值&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点汇总</title>
    <link href="http://yoursite.com/2017/07/31/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2017/07/31/前端知识点汇总/</id>
    <published>2017-07-31T14:28:53.000Z</published>
    <updated>2018-11-26T04:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端知识点总结"><a href="#前端知识点总结" class="headerlink" title="前端知识点总结"></a>前端知识点总结</h2><h3 id="HTML，HTTP-web综合部分"><a href="#HTML，HTTP-web综合部分" class="headerlink" title="HTML，HTTP,web综合部分"></a>HTML，HTTP,web综合部分</h3><ol><li><p>HTML是一种标记语言；不是编程语言；HTML的标签通常由开始标签和闭合标签，</p></li><li><p><strong>HTML5新增的语义元素</strong></p><p>| header  |    定义文档或节的页眉    |<br>| :—–: | :————-: |<br>|   nav   |    定义导航链接的容器    |<br>| section |     定义文档中的节     |<br>| article |   定义独立的自包含文章    |<br>|  aside  | 定义内容之外的内容（比如侧栏） |<br>| footer  |    定义文档或节的页脚    |<br>| details |     定义额外的细节     |<br>| summary | 定义details元素的标题  |</p></li><li><p>常见的排序算法和时间复杂度、空间复杂度。参考图片<a href="https://github.com/qiu-deqing/FE-interview/blob/master/img/sort-compare.png" target="_blank" rel="noopener">https://github.com/qiu-deqing/FE-interview/blob/master/img/sort-compare.png</a></p></li><li><p><strong>前端需要注意哪些SEO</strong></p><ol><li>合理的title、description、keywords：搜索对这三项的权重逐渐减小；title强调重点即可；重要的关键词不要超过2次；description把页面高度概括；长度合适；keywords列举出重要关键词即可</li><li>语义化HTML代码，符合W3C规范</li><li>重要的HTML代码放在最前边</li><li>重要内容不要用js输出；爬虫不会执行js获取内容</li><li>非装饰性图片必须加alt</li><li>提高网站速度</li><li>少用iframe</li></ol></li><li><p><strong>web开发中会话跟踪的方法</strong></p><ol><li>cookie：document.cookie = name + “=” + escape(value) + “;expires=”+过期时间（毫秒） + “;path=/“;（作用域）</li><li>session</li><li>url重写</li><li>隐藏input</li><li>ip地址</li></ol></li><li><p><strong>img标签的title和alt的区别 </strong></p><ol><li>title是global attributes之一，用于为元素提供附加的advisory infomation。通常鼠标移动到元素上的时候显示。</li><li>alt是img标签的特有属性；是图片内容的描述信息；提高图片的可访问性</li></ol></li><li><p><strong>doctype是什么，常见的doctype及特点</strong></p><ol><li><p>&lt;!docutype&gt;是文档声明。声明必须处于HTML文档的头部，在html文档之前，html5不区分大小写</p></li><li><p>文档声明不是一个Html标签，是一个用于告诉浏览器当前html版本的指令</p></li><li><p>现代浏览器的html布局通是通过引擎检查doctype决定使用兼容模式还是标准模式对文档进行渲染</p></li><li><p>在html 4.01中doctype声明时指向一个DTD;HTML4.01基于SGML，所以DTD指定了标记规则保证浏览器能够正确渲染。html5不是基于SGML的；因此不用指定DTD</p><p><strong>常见的doctype</strong></p></li></ol><ul><li><strong>HTML4.01 strict</strong>：不允许使用表现性、废弃元素（如font）以及frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></li><li><strong>HTML4.01 Transitional</strong>:允许使用表现性、废弃元素（如font），不允许使用frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></li><li><strong>HTML4.01 Frameset</strong>:允许表现性元素，废气元素以及frameset。声明：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</code></li><li><strong>XHTML1.0 Strict</strong>:不使用允许表现性、废弃元素以及frameset。文档必须是结构良好的XML文档。声明：<code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</code></li><li><strong>XHTML1.0 Transitional</strong>:允许使用表现性、废弃元素，不允许frameset，文档必须是结构良好的XMl文档。声明： <code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</code></li><li><strong>XHTML 1.0 Frameset</strong>:允许使用表现性、废弃元素以及frameset，文档必须是结构良好的XML文档。声明：<code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;</code></li><li><strong>HTML 5</strong>: <code>&lt;!doctype html&gt;</code></li></ul><ol start="8"><li><p><strong>HTML全局属性（Global attribute）有哪些</strong></p><ol><li>accesskey:设置快捷键，提供快速访问元素</li><li>class：为元素设置类标示，多个类名用空格隔开</li><li>contenteditable：指定元素的内容是否可编辑</li><li>contextMenu：自定义鼠标右键弹出菜单内容</li><li>data-*：为元素增加自定义属性</li><li>dir：设置元素文本fangxiang</li><li>dragable：设置元素是否可拖拽</li><li>hidden：表示一个文档是否在文档上显示</li><li>id：元素id，文档内唯一</li><li>lang：元素内容的语言</li><li>spellcheck：是否启动拼写和语法检查</li><li>style：行内css样式</li><li>tabindex：设置元素可以获得焦点；通过tab可以导航</li><li>title：元素相关的建议信息</li><li>translate：元素和子孙节点内容是否本地化</li></ol></li><li><p><strong>什么是web语义化，有什么好处</strong></p><p>web语义化是指通过HTML标记表示页面包含的信息，包含了HTML标签的语义化和css命名的语义化。HTML的语义化是指–通过使用语义化的标签恰当的表示文档结构<br>css的语义化是指–为HTML的标签添加有意义的class，id补充未表达的语义；<br><strong>语义化的好处</strong> ：</p><ul><li>去掉样式后页面呈现清晰的解构</li><li>盲人使用读屏器更好的阅读</li><li>搜索引擎更好地理解页面；有利于收录</li><li>便团队项目的可持续运作及维护</li></ul></li><li><p><strong>HTTP method</strong></p><ol><li>一台服务器要与HTTP1.1兼容，只要为资源实现get和HEAD方法即可</li><li>GET是最常用的方法，通常用于<strong>请求服务器发送某个资源</strong>。</li><li>HEAD与GET类似，但<strong>服务器在响应中值返回首部，不返回实体的主体部分</strong></li><li>PUT让服务器<strong>用请求的主体部分来创建一个由所请求的URL命名的新文档，或者如果那个URL已经存在的话，就用这个主体代替它</strong></li><li>POST起初是用来向服务器输入数据的。实际上通常会用它来支持HTML的表单，表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方</li><li>TRACE会在目的服务器端发起一个环回诊断，最后一站的服务器会弹一个TRACE响应并在响应主题中携带它收到的原始请求报文。TRACE方法主要用于诊断，用于验证是否如愿穿过了请求/响应链。</li><li>OPTIONS方法请求web服务器告知其支持的各种功能，可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。</li><li>DELETE请求服务器删除请求URL指定的资源</li></ol></li><li><p><strong>从浏览器地址栏输入URL到显示页面的步骤(以HTTP为例）</strong></p><ol><li><p>在浏览器输入URL</p></li><li><p>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p><ul><li>如果资源未缓存，发起新请求</li><li>如果已缓存，检验是否过期，未过期直接供给客户端，否则与服务器进行验证</li><li>检查是否过期通常由两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>:<ul><li>HTTP1.0提供Expires，值为一个绝对时间表示缓存失效时间</li><li>HTTP1.1增加了cache-Control:max-age=;值是以秒为单位的最大过期时间</li></ul></li></ul></li><li><p>浏览器解析URL获取协议、主机、端口、路径</p></li><li><p>浏览器组装一个HTTP（GET）请求报文</p></li><li><p>浏览器获取主机IP地址。过程如下：</p><ul><li>浏览器缓存</li><li>本机缓存</li><li>hosts文件</li><li>路由器缓存</li><li>ISP DNS缓存</li><li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li></ul></li><li><p>打开一个socket与目标ip地址，端口建立TCP连接，三次握手如下</p><ul><li>客户端发送一个TCP的SYN=1，Seq=x的包到服务器端口</li><li>服务器发回SYN=1，ACK=x+1，Seq=y的响应包</li><li>客户端发送ACK=Y+1，Seq=Z</li></ul></li><li><p>TCP连接建立后发送HTTP请求</p></li><li><p>服务器接收请求并解析，将请求转发到服务器程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</p></li><li><p>服务器检查HTTP请求是否包含缓存验证信息，如果验证缓存未过期，返回304等对应状态码</p></li><li><p>处理程序读取完整请求并准备HTTP相应，可能需要查询数据库等操作</p></li><li><p>服务器将相应报文通过TCP连接发送回浏览器</p></li><li><p>浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用。关闭TCP连接的四次握手如下：</p><ul><li>主动方发送Fin=1，Ack=Z，Seq=X报文</li><li>被动方发送ACK=X+1，Seq=Z报文</li><li>被动发发送Fin=1，ACK=X，Seq=Y报文</li><li>主动方发送ACK=Y,Seq=X报文</li></ul></li><li><p>浏览器检查响应状态码：是否为1XX,3XX,4XX,5XX这些情况处理与2XX不同</p></li><li><p>如果资源可缓存，进行缓存</p></li><li><p>对响应进行解码</p></li><li><p>根据资源的类型决定如何处理</p></li><li><p>解析HTML,构建DOM树，下载资源，构建cssDom树，执行js脚本，这些操作没有严格的先后顺序</p></li><li><p>构建DOM树</p><ul><li>Tokenizing：根据HTML规范将字符流解析为标记</li><li>lexing：词法分析将标记转换为对象定义属性和规则</li><li>DOM construction：根据HTML标记关系将对象组成Dom树</li></ul></li><li><p>解析过程中遇到图片、样式表、js文件，启动下载</p></li><li><p>构建cssDom树</p><ul><li>从DOM树的根节点遍历所有的可见节点，不可见节点包括：(1)<code>script</code>和<code>meta</code>标签 (2)被css隐藏的节点</li><li>对每一个可见节点，找到恰当的cssDom并应用</li><li>发布可视节点的内容和计算样式</li></ul></li><li><p>js解析如下;</p><ol><li>浏览器创建document对象并解析HTML，将解析到的元素和文本节点添加到文档中。此时document.readystate为loading</li><li>HTML遇到没有async和defer的script时；将他们添加到文档中然后执行行内或者外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停</li><li>当解析器遇到设置了async属性的script时；开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行；但是解析器不会停下来等它下载；异步脚本禁止使用document.write()</li><li>当文档完成解析，document.readstate变成interactive</li><li>所有defer脚本会按照在文档出现的顺序执行；延迟脚本嫩访问完整文档树；禁止使用document.write()</li><li>浏览器在Document对象上触发DomContentLoaded事件</li><li>此时文档完全解析完成；浏览器可能还在等待图片等内容加载；等这些内容完成载入并且所有异步脚本载入和执行。document.readyState状态变为complete。window触发load事件</li><li>显示页面</li></ol></li><li><p><strong>http request报文解构</strong></p><ol><li><p>首行是Request-Line包括：请求方法、请求URI、协议版本、CRLF</p></li><li><p>首行之后是若干行请求头，包括general-header、request-header或者entity-header，每一行以CRLF结束</p></li><li><p>请求头和消息实体之间有一个CRLF分隔、</p></li><li><p>根据实际请求需要可能包含一个消息实体；一个请求报文例子如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1</span><br><span class="line">Host: www.w3.org</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</span><br><span class="line">Referer: https://www.google.com.hk/</span><br><span class="line">Accept-Encoding: gzip,deflate,sdch</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</span><br><span class="line">Cookie: authorstyle=yes</span><br><span class="line">If-None-Match: &quot;2cc8-3e3073913b100&quot;</span><br><span class="line">If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class="line"></span><br><span class="line">name=qiu&amp;age=25</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>HTTP response报文结构是怎样的</strong></p><ol><li><p>行首的状态行包括：<strong>HTTP版本，状态码，状态描述，</strong>后边跟一个CRLF</p></li><li><p>行首之后是若干行响应头，<strong>包括：通用头部，响应头部，实体头部</strong></p></li><li><p>响应头部和响应实体之间用一个CRLF空行分隔</p></li><li><p>最后是一个可能的消息实体；响应报文例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 08 Jul 2014 05:28:43 GMT</span><br><span class="line">Server: Apache/2</span><br><span class="line">Last-Modified: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class="line">ETag: &quot;40d7-3e3073913b100&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 16599</span><br><span class="line">Cache-Control: max-age=21600</span><br><span class="line">Expires: Tue, 08 Jul 2014 11:28:43 GMT</span><br><span class="line">P3P: policyref=&quot;http://www.w3.org/2001/05/P3P/p3p.xml&quot;</span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;: &quot;qiu&quot;, &quot;age&quot;: 25&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>如何进行网站性能优化</strong></p><ul><li>content方面<ol><li>减少HTTP请求：合并文件，图标类文件或复用小图使用精灵图，</li><li>减少DNS查询：DNS查询之前浏览器不能从这个主机下载任何文件。方法：DNS缓存、将资源分不到恰当数量的主机名</li><li>避免重定向；使ajax可缓存</li><li>非必须组件采用延迟加载；未来所需组件预加载</li><li>减少DOM元素数量</li><li>将资源放在不同的域下：浏览器同时从同一个域下下载的资源有限；增加域可以提高并行下载量</li><li>减少iframe数量</li><li>不要出现404</li></ol></li><li>server方面<ol><li>使用CDN</li><li>添加Expires或者Cache-Control响应头</li><li>对组件使用Gzip压缩</li><li>配置Etag</li><li>ajax使用get请求</li><li>避免空src的请标签</li></ol></li><li>cookie方面<ol><li>减小cookie大小</li><li>引入资源的域名不要包含cookie</li></ol></li><li>css方面<ol><li>将样式表放到页面顶部</li><li>不使用css样式表</li><li>不使用@import！</li><li>不使用IE的filter</li></ol></li><li>js方面<ol><li>将脚本放入页面的底部</li><li>将js和css从外部引入</li><li>压缩js和css；删除不需要的脚本</li><li>减少DOM访问</li><li>合理设计事件监听器</li></ol></li><li>图片方面<ol><li>优化图片：根据实际颜色需要选择色深、压缩</li><li>优化css精灵</li><li>不要在HTML中拉伸图片</li><li>保证favicon.icon小并且可缓存</li></ol></li><li>移动方面<ol><li>保证组件小于25k</li><li>pack component into a Multipart Document 将项目分为多个组件</li></ol></li></ul></li><li><p><strong>什么是渐进增强</strong></p><p>渐进增强是指在web设计时强调可访问性、语义化HTML标签、外部样式表和脚本。保证所有人都能访问页面的基本内容和功能；同时为高级浏览器和高宽带用户提供良好的用户体验。核心原则如下：</p><ul><li>所有浏览器都必须能访问基本内容</li><li>所有浏览器都必须能使用基本功能</li><li>所有内容都包含在语义化标签中</li><li>通过外部css提供增强布局</li><li>通过非侵入式、外部js提供增强功能</li><li>终端用户web浏览器的个人偏好</li></ul></li><li><p><strong>HTTP状态码及其含义</strong></p><ol><li>1XX：信息状态码<ul><li>100 Continue:客户端应当继续发请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且未被拒绝</li><li>101：服务器已经理解客户端的请求</li></ul></li><li>2XX：成功状态码<ul><li>200 OK：请求成功，请求所希望的响应头或数据体将随此响应返回</li><li>201 Create：表示服务器在请求的响应中建立了新文档；应在定位头信息中给出他的URL。</li><li>202 Accepted;请求正在被执行，但还没有处理完</li><li>203 Non-Authoritative Information:</li><li>204 No Content ; </li><li>205 Reset Content</li><li>Partial Content</li></ul></li><li>3XX : 重定向<ul><li>300 Multiple Choice : 表示请求的文档可以在多个地方找到，并将在返回的文档中列出来；如果服务器有首选设置；首选项将会被列于定位响应头的信息中</li><li>301 Moved Permanently 请求的文档在别的地方；文档新的URL会在定位响应头中给出。浏览器会自动连接到新的URL</li><li>302 Found 与301类似，只是定位信息中所给的URL是临时地址；而不是永久的改变地址</li><li>303 see Other</li><li>304 Not Modified</li><li>305 Use Proxy</li><li>306 </li><li>307  Temporary Redirect</li></ul></li><li>4XX<ul><li>400 Bad Request</li><li>401 Unauthorized</li><li>402 Payment Required</li><li>403 Forbidden</li><li>404 Not Found</li><li>405 Method Not Allowed</li></ul></li><li>5XX<ul><li>500 Internal Server Error</li><li>501 Not Implemented</li><li>502 Bad Gateway</li><li>503 Service Unavailable</li><li>504 GateWay Timeout</li></ul></li></ol></li></ol></li></ol></li></ol><h3 id="css选择部分"><a href="#css选择部分" class="headerlink" title="css选择部分"></a>css选择部分</h3><ol><li><p><strong>CSS选择器有哪些</strong></p><ol><li><code>*</code>通用选择器：选择所有的元素，不参与计算优先级，兼容IE6+</li><li><code>#id</code>id选择器：选择id值为id的元素，兼容性IE6+</li><li><code>.X</code>类选择器：选择class包含x的元素，兼容性IE6+</li><li><code>X Y</code>后代选择器：选择满足x选择器的后代节点中满足Y选择器的元素；兼容IE6+</li><li><code>tag name</code>元素选择器：选择所有标签为x的元素；兼容IE6</li><li><code>.link, :visited, :focus, :hover, :active</code>选择特定状态的链接元素，兼容IE4+</li><li><code>X+Y</code>直接兄弟选择器：在x之后的第一个兄弟节点中选择满足Y选择器的元素，兼容IE7+</li><li><code>X&gt;Y</code>子选择器：选择x的子元素中满足y选择器的元素，兼容IE7</li><li><code>X~Y</code>兄弟选择器：选择x之后的所有兄弟节点中满足x选择器的元素，兼容性IE7+</li><li>[attr]：选择所有设置了attr属性的元素，兼容IE7</li><li>[attr=value]：选择属性值刚好等于value的元素</li><li>[attr~=value]：选择属性值刚好为空白符分隔，其中一个值刚好是value的元素</li><li>[attr|=value]：选择属性值刚好为value或者value开头的元素</li><li>[attr^=value]：选择属性值以value开头的元素</li><li>[attr$=value]：选择属性值以value结尾的元素</li><li>[attr=value]*：选择属性值中包包含value的元素</li><li>[:checked]：选择单选框、复选框、下拉框中选中状态下的元素，兼容IE9+</li><li><code>X:after， x::after</code>：after伪元素，选择元素虚拟子元素（元素的最后一个子元素），css3中<code>::</code>表示伪元素。兼容性：<code>:after</code>为IE8+<code>::after</code>为IE9+</li><li><code>:hover</code>：鼠标移入状态的元素，兼容性a标签IE4+，所有元素IE7+</li><li><code>:not(selector)</code>：选择不符合selector的元素。不参与计算优先级，兼容IE9+</li><li><code>::first-letter</code>:伪元素，选择块元素的第一行的第一个字母。兼容IE5.5+</li><li><code>::first-line</code>：伪元素，选择块元素的第一行；兼容性IE5.5+</li><li><code>:nth-child(an+b)</code>：伪类，选择前边有an+b-1个兄弟节点的元素，其中n&gt;=0，兼容性IE9+</li><li><code>:nth-last-child(an+b)</code>：伪类，选择后边有an+b-1个兄弟节点的元素，其中n&gt;=0，兼容性IE9+</li><li><code>X:nth-of-type(an+b)</code>：伪类，X为选择器，解析得到的元素标签，选择前边有an+b-1个相同标签兄弟节点的元素；兼容性IE9+</li><li><code>X:nth-last-of-type(an+b)</code>：伪类，x为选择器，解析得到元素标签，选择后面有an+b-1个相同标签兄弟的元素；兼容性IE9+</li><li><code>X:first-child</code>：伪类，选择满足X选择器的元素，切这个元素是其父元素节点的第一个子元素。兼容IE7+</li><li><code>X:last-child</code>：伪类，选择满足X选择器的元素，切这个元素是其父元素节点的最后一个子元素。兼容IE9+</li><li><code>X:only-child</code>：伪类，选择满足X选择器的元素，且这个元素是其父元素的唯一子元素。兼容IE9+</li><li><code>X:only-of-type</code>：伪类，选择x选择的元素，解析得到元素标签，如果该元素没有相同类型的兄弟节点是选中它，兼容性IE9+</li><li><p><code>X：first-of-type</code>：伪类，选择X选择的元素，解析得到元素标签，如果该元素此类型元素的第一个元素，选中它；兼容IE9+</p></li><li><p><strong>css sprite是什么，有什么优缺点</strong></p></li></ol><p>概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案</p><p><strong>优点</strong></p><pre><code>1. 减少HTTP请求，极大的提高页面的加载速度2. 增加图片信息重复度，提高压缩比，减小图片大小3. 更换风格方便；只需在一张或者几张图片上修改颜色或者样式即可实现</code></pre><p><strong>缺点</strong></p><pre><code>1. 图片合并麻烦2. 维护麻烦，修改一个图片可能需要从新布局整个图片样式</code></pre></li><li><p><strong>display：none;与visibility：hidden</strong>的区别</p><p>他们都是让元素不可见；区别</p><ol><li>display:none;会让元素完全从渲染树中消失，渲染的时候不占用任何空间；visibility:hidden不会让元素从渲染树中消失，设置该属性的元素会继续占用空间；只是内容不可见</li><li>display:none是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility:hidden是继承属性；子孙节点的消失是继承了hidden属性值；通过设置<code>visibility:visible</code>可以让子孙节点显示</li><li>修改常规流中元素的display通常会造成文档重排。修改visibility只会引起本元素的重绘</li><li><p>读屏器不会读取设置display:none属性值的内容，会读取visibility:hidden元素内容</p></li><li><p><strong>css hack原理及常用的hack技术</strong></p></li></ol><p>原理:利用不同浏览器对css的支持和解析结果不一样编写针对特定浏览器样式；常见的hack样式（1）属性hack（2）选择器hack（3）IE条件注释</p><ul><li><p>IE条件注释:适用于IE5-IE9,常见的格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if IE 6]&gt;</span><br><span class="line">Special instructions for IE 6 here</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure></li><li><p>选择器hack:不同浏览器对选择器的支持不一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/***** Selector Hacks ******/</span><br><span class="line"></span><br><span class="line">/* IE6 and below */</span><br><span class="line">* html #uno  &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* IE7 */</span><br><span class="line">*:first-child+html #dos &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* IE7, FF, Saf, Opera  */</span><br><span class="line">html&gt;body #tres &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* IE8, FF, Saf, Opera (Everything but IE 6,7) */</span><br><span class="line">html&gt;/**/body #cuatro &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* Opera 9.27 and below, safari 2 */</span><br><span class="line">html:first-child #cinco &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* Safari 2-3 */</span><br><span class="line">html[xmlns*=&quot;&quot;] body:last-child #seis &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* safari 3+, chrome 1+, opera9+, ff 3.5+ */</span><br><span class="line">body:nth-of-type(1) #siete &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* safari 3+, chrome 1+, opera9+, ff 3.5+ */</span><br><span class="line">body:first-of-type #ocho &#123;  color: red &#125;</span><br><span class="line"></span><br><span class="line">/* saf3+, chrome1+ */</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio:0) &#123;</span><br><span class="line"> #diez  &#123; color: red  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* iPhone / mobile webkit */</span><br><span class="line">@media screen and (max-device-width: 480px) &#123;</span><br><span class="line"> #veintiseis &#123; color: red  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Safari 2 - 3.1 */</span><br><span class="line">html[xmlns*=&quot;&quot;]:root #trece  &#123; color: red  &#125;</span><br><span class="line"></span><br><span class="line">/* Safari 2 - 3.1, Opera 9.25 */</span><br><span class="line">*|html[xmlns*=&quot;&quot;] #catorce &#123; color: red  &#125;</span><br><span class="line"></span><br><span class="line">/* Everything but IE6-8 */</span><br><span class="line">:root *&gt; #quince &#123; color: red  &#125;</span><br><span class="line"></span><br><span class="line">/* IE7 */</span><br><span class="line">*+html #dieciocho &#123;  color: red &#125;</span><br><span class="line"></span><br><span class="line">/* Firefox only. 1+ */</span><br><span class="line">#veinticuatro,  x:-moz-any-link  &#123; color: red &#125;</span><br><span class="line"></span><br><span class="line">/* Firefox 3.0+ */</span><br><span class="line">#veinticinco,  x:-moz-any-link, x:default  &#123; color: red  &#125;</span><br></pre></td></tr></table></figure></li><li><p>属性hack:不同浏览器解析bug或方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* IE6 */</span><br><span class="line">#once &#123; _color: blue &#125;</span><br><span class="line"></span><br><span class="line">/* IE6, IE7 */</span><br><span class="line">#doce &#123; *color: blue; /* or #color: blue */ &#125;</span><br><span class="line"></span><br><span class="line">/* Everything but IE6 */</span><br><span class="line">#diecisiete &#123; color/**/: blue &#125;</span><br><span class="line"></span><br><span class="line">/* IE6, IE7, IE8 */</span><br><span class="line">#diecinueve &#123; color: blue\9; &#125;</span><br><span class="line"></span><br><span class="line">/* IE7, IE8 */</span><br><span class="line">#veinte &#123; color/*\**/: blue\9; &#125;</span><br><span class="line"></span><br><span class="line">/* IE6, IE7 -- acts as an !important */</span><br><span class="line">#veintesiete &#123; color: blue !ie; &#125; /* string after ! can be anything */</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><strong>specified value,computed value,use value计算方法</strong></li></ol><ul><li>specified value：计算方法如下：<ul><li>如果样式表设置了一个值；使用这个值</li><li>如果没有设置值；这个属性是继承属性，从父元素继承</li><li>如果没有设置值且没有继承；则使用css属性规范指定的初始值</li></ul></li><li>computed value：以specified value根据规范定义的行为进行计算，通常将相对值计算为绝对值，computed value的主要作用是用于继承</li><li>used value：属性计算后的最终值，对于大多数属性可以通过window.getComputedStyle获得，尺寸值的单位为元素；以下属性依赖于布局<ul><li>background-position</li><li>bottom,left,right,top</li><li>height,width</li><li>margin值,padding值</li><li>min-height,min-width</li><li>text-indent</li></ul></li></ul><ol start="6"><li><p><strong>link与@import的区别</strong></p><ol><li>link是HTML方式，@import是css方式</li><li>link最大限度支持并行下载，@import过多嵌套导致串行下载，</li><li>link可以通过rel=“alternate stylesheet”指定候选样式</li><li>浏览器支持link早于@import，可以使用@import对老浏览器隐藏样式</li><li>@import必须在样式规则之前；可以在css文件中引用其他文件</li></ol></li><li><p><strong><code>display:block</code>和<code>display:inline</code>的区别</strong></p><ol><li>block元素特点<br>处于常规流中，如果<code>width</code>没有设置，会自动填充满父容器；可以使用margin、padding值；在没有设置高度的情况下会扩展高度以包含常规流中的子元素；处于常规流中布局时在前后元素位置之间独立；忽略<code>vertical-align:inline</code>元素特点</li><li>inline元素特点<br>水平方向上根据direction依次布局；不会在元素前后进行换行；受<code>white-space</code>控制；使用margin、padding在竖直方向无效；width/height属性对非替换行内元素无效，宽度由元素内容决定；非替换元素的行框高由line-height确定，替换行呢元素的行框高由height，margin，padding，border决定；浮动或绝对定位时会转化为block；vertical-align属性无效</li></ol></li><li><p><strong>PNG,GIF,JPG格式的区别及如何选择</strong></p><ol><li>gif</li></ol><ul><li>8位像素，256色</li><li>无损压缩</li><li>支持简单动画</li><li>支持boolean透明</li><li>适合简单动画</li></ul><ol start="2"><li>JPEG</li></ol><ul><li>颜色限于256</li><li>有损压缩</li><li>可控制压缩质量</li><li>不支持透明</li><li>适合照片</li></ul><ol start="3"><li>PNG</li></ol><ul><li>有PNG8和trueColorPNG</li><li>png8类似GIF颜色上线为256，文件小，支持alpha透明，无动画</li><li>适合图标，背景，按钮</li></ul></li><li><p><strong>css有哪些继承属性</strong></p></li></ol><ul><li>font-size、font-color、font-family</li><li>word-break</li><li>letter-spacing</li><li>text-align</li><li>line-height</li><li>color</li><li>visibility</li><li>cursor</li></ul><ol start="10"><li><p><strong>IE6浏览器有哪些常见的bug，缺陷或者与标准不一致的地方；如何解决</strong></p><ol><li>IE6不支持line-height;解决方法使用css hack</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.target &#123;</span><br><span class="line">    min-height: 100px;</span><br><span class="line">    height: auto !important;</span><br><span class="line">    height: 100px;   // IE6下内容高度超过会自动扩展高度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>ol&gt;li</code>的序号全为1，不递增；解决方法：为<code>li</code>设置样式<code>display:list-item</code>;</p></li><li><p>未定位父元素<code>overflow:auto</code>,包含<code>position:relative</code>子元素，子元素高于父元素时会溢出。解决方法：（1）子元素去掉定位属性（2）不能为子元素去掉定位时；父元素<code>position:relative</code></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer &#123;</span><br><span class="line">    width: 215px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    overflow: auto;</span><br><span class="line">    position: relative;  /* 修复bug */</span><br><span class="line">&#125;</span><br><span class="line">.inner &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: purple;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>IE6只支持a标签的<code>:hover</code>伪类，解决方法：使用js为元素添加监听mouseenter、mouseleave事件</p></li><li><p>IE5-IE8不支持<code>opacity</code>,解决方法：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.opacity &#123;</span><br><span class="line">    opacity: 0.4</span><br><span class="line">    filter: alpha(opacity=60); /* for IE5-7 */</span><br><span class="line">    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=60)&quot;; /* for IE 8*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>IE6在设置height小于font-size时高度为font-size；解决方法：font-size：0</p></li><li><p>IE6不支持PNG透明背景；解决方法；IE6下使用gif图片</p></li><li><p>IE6-7不支持display：inline-block解决办法：设置inline并处罚hasLayout</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: inline-block;</span><br><span class="line">*display: inline;</span><br><span class="line">*zoom: 1;</span><br></pre></td></tr></table></figure><ol start="9"><li><p>IE6下浮动元素在浮动方向上与父元素边界接触元素的外边距会加倍。解决方法：（1）使用padding控制间距（2）浮动元素<code>display:inline</code>这样解决问题无任何副作用；css标准规定浮动元素会自动转为block</p></li><li><p>通过为块级元素设置宽度和左右margin值为auto时；IE6不能实现水平居中；解决方法，为父元素设置<code>text-align:center</code></p></li></ol></li><li><p><strong>容器包含若干浮动元素时如何清理浮动</strong></p><ol><li><p>容器元素闭合标签前添加额外元素并设置clear：both属性</p></li><li><p>父元素触发块级格式化上下文</p></li><li><p>设置容器元素伪元素进行清理</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 在标准浏览器下使用</span><br><span class="line">* 1 content内容为空格用于修复opera下文档中出现</span><br><span class="line">*   contenteditable属性时在清理浮动元素上下的空白</span><br><span class="line">* 2 使用display使用table而不是block：可以防止容器和</span><br><span class="line">*   子元素top-margin折叠,这样能使清理效果与BFC，IE6/7</span><br><span class="line">*   zoom: 1;一致</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: &quot; &quot;; /* 1 */</span><br><span class="line">    display: table; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* IE 6/7下使用</span><br><span class="line">* 通过触发hasLayout实现包含浮动</span><br><span class="line">**/</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>如何创建块级格式化上下文，BFC有什么用</strong></p></li></ol><p>创建规则：</p><ol><li>根元素</li><li>浮动元素</li><li>绝对定位元素</li><li><code>display</code>取值为<code>inline-block,table-cell,table-caption,flex,inline-flex</code>之一的元素</li><li><code>over</code>不是visible的元素</li></ol><p>作用：</p><p>​    可以包含浮动元素，不被浮动元素覆盖，阻止父子元素的margin折叠</p><ol start="13"><li><p><strong>display，float，position的关系</strong></p><ol><li>如果display为none，那么position和float都不起作用</li><li>否则，如果position值为absolute或者fixed；框就是定位的；float的计算值为none</li><li>否则，如果float是不none；框是浮动的</li></ol></li><li><p><strong>外边距折叠</strong></p></li></ol><p>毗邻的两个或者多个margin会合并成一个margin；叫做外边距折叠。规则如下：</p><pre><code>1. 两个或者多个毗邻的普通流中块元素垂直方向的margin值折叠2. 浮动元素、inline-block元素、绝对定位元素的margin值不会和垂直方向的其他元素的margin折叠3. 创建了块级格式化上下文的元素，不会和他的子元素发生margin折叠4. 元素自身的margin-bottom和margin-top相邻时也会折叠</code></pre><ol start="15"><li><p><strong>如何确定一个元素的包含块</strong></p><ol><li>根元素的包含块叫做初始包含块，在连续媒体中他的尺寸与viewport相同；对于paged media，他的尺寸等于page area。初始包含块的direction属性与根元素相同</li><li><code>position</code>为<code>relative</code>或者<code>static</code>的元素；他的包含块由最近的块级（display为block/list-item/table）祖先元素到内容框组成</li><li>如果元素position为fixed。对于连续媒体；它的包含块为viewport；对于paged media；包含块为page area</li><li>如果元素的position为absolute；它的包含块由祖先元素中祖先元素中最近一个position为relative、absolute、或者fixed的元素产生；如果找不到定位的元素；包含块为初始包含块</li></ol></li><li><p><strong>如何水平居中一个元素</strong></p><ol><li>如果需要居中</li></ol></li></ol></li></ol><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端知识点总结&quot;&gt;&lt;a href=&quot;#前端知识点总结&quot; class=&quot;headerlink&quot; title=&quot;前端知识点总结&quot;&gt;&lt;/a&gt;前端知识点总结&lt;/h2&gt;&lt;h3 id=&quot;HTML，HTTP-web综合部分&quot;&gt;&lt;a href=&quot;#HTML，HTTP-web综合部
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>note_taking_01</title>
    <link href="http://yoursite.com/2017/07/10/note-taking-01/"/>
    <id>http://yoursite.com/2017/07/10/note-taking-01/</id>
    <published>2017-07-10T07:50:27.000Z</published>
    <updated>2018-11-26T04:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于blob类型的理解"><a href="#关于blob类型的理解" class="headerlink" title="关于blob类型的理解"></a>关于blob类型的理解</h3><p>想下载一个视频时发现是个blob:src形式；不明白这个是个什么鬼，以下是搜索学习的总结</p><ol><li><p>参考网址：<a href="https://creamidea.github.io/static/html/articles/HTML5-Video-Blob.html" target="_blank" rel="noopener">https://creamidea.github.io/static/html/articles/HTML5-Video-Blob.html</a>  。先来段代码熟悉下意思</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> video=<span class="built_in">document</span>.querySelector(<span class="string">'video'</span>);</span><br><span class="line"><span class="keyword">var</span> mediaSource=<span class="keyword">new</span> MdeiaSource;</span><br><span class="line">video.Src=URL.createObjectURL(mediaSource);</span><br><span class="line">mediaSource.addEventListener(<span class="string">'sourceopen'</span>,sourceOpen);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sourceOpen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mediaSource=<span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> sourceBuffer = mediaSource.addSourceBuffer(<span class="string">'video/mp4'</span>;codecs=<span class="string">"avc1.42E01E,mp4a.40.2"</span>);</span><br><span class="line">sourceBuffer.addEventListener(<span class="string">'updateend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  mediaSource.endOfStream();</span><br><span class="line">  video.play();</span><br><span class="line">&#125;)</span><br><span class="line">sourceBuffer.appendBuffer(buf);<span class="comment">// buf is the arraybuffer to store the video data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析：创建变量名为video的DOM对象，创建变量名为mediaSource的MediaSource对象。通过函数createObjectURL将video对象的src和mediaSource进行连接，然后通过注册事件event::sourceopen来触发当前连接之后的的回调处理；回调处理就是需要赋值视频数据的地方，调用MediaSourceBuffer::addSourceBuffer方法来构建一个存放视频数据的Buffer；在往buffer中存放数据结束后触发事件updateend。然后调用play函数通知浏览器播放视频</p></li><li><p>MediaSource :mediaSource是Media Source Extensions API表示媒体资源HTMLMediaElement对象的接口。MediaSource对象可以附着在HTMLMediaElement在客户端进行播放。<br>参考网址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaSource" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/MediaSource</a></p><p>MediaSource属性：</p><ol><li>MediaSource.sourceBuffers:<strong>只读</strong> ，返回一个SourceBufferList对象，包含了SourceBuffer的列表object associated with this MediaSource.</li><li>MediaSource.activeSourceBuffer:<strong>只读</strong> </li><li>MediaSource.readyState:只读</li><li>mediaSource.duration</li></ol><p>方法：</p><ol><li>addSourceBuffer():该事件是在触发sourceopen监听时进行的，该动作会创建一个sourceBuffer对象用于数据流的播放处理。如果mediaSource对象无法触发该事件；则无法通过该扩展进行播放的。</li><li>removeSourceBuffer():</li><li>endOfStream()</li></ol></li><li><p>MediaSource接口的使用：</p><p>参考网址：<a href="http://chenzhaofei.lofter.com/post/1d03c1b7_58d8a79" target="_blank" rel="noopener">http://chenzhaofei.lofter.com/post/1d03c1b7_58d8a79</a></p><ol><li><p>判断是否mediaSource的扩展类，该语句决定了整个播放方式是否可以使用MediaSource接口控制播放器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.MediaSource = <span class="built_in">window</span>.MediaSource || <span class="built_in">window</span>.WebkitMediaSource;</span><br></pre></td></tr></table></figure></li><li><p>isTypeSupporteed:判断是否支持要解码播放的视频文件编码和类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MediaSource.isTypeSupported(<span class="string">'video/webm;codecs="vorbis,vp8"'</span>);<span class="comment">//是否支持webm</span></span><br><span class="line">MediaSource.isTypeSupported(<span class="string">'video/mp4;codecs="avc1.42E01E,mp4a.40.2"'</span>)<span class="comment">//是否支持MP4</span></span><br><span class="line">MediaSource.isTypeSupported(<span class="string">'video/mp2t;codes="avc1.42E01E,mp4a.40.2"'</span>)<span class="comment">//是否支持ts</span></span><br></pre></td></tr></table></figure></li><li><p>addSourceBuffer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mediaSource.addSourceBuffer(<span class="string">'video/mp4;codecs="avc1.42E01E,mp4a.40.2"'</span>)</span><br></pre></td></tr></table></figure></li><li><p>appendBuffer:sourceBuffer对象的方法，用于持续数据的添加播放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceBuffer.appendBuffer(Uint8array);<span class="comment">//媒体二进制数据</span></span><br></pre></td></tr></table></figure></li><li><p>buffered: 类型为TimeRanges，描述了添加进去的所有媒体数据的range信息。为一个数组，里边标示了持续或间断的时间信息列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;buffered.length;i++)&#123;</span><br><span class="line">  start=buffered.start(i)<span class="comment">//第i个range信息的开始时间</span></span><br><span class="line">  end=buffered.end(i);<span class="comment">//第i个range信息的结束时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果播放的媒体数据是连续的；则只有一个开始时间点和一个结束时间点。所以如果要计算缓冲中还存在多少时间则可以通过该描述信息与当前播放时间点进行换算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.mediaSource)&#123;</span><br><span class="line">    <span class="keyword">this</span>.mediaSource=<span class="keyword">new</span> MediaSource();</span><br><span class="line">    <span class="keyword">var</span> me=<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.mediaSource.addEventListener(<span class="string">"sourceopen"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      me.onMediaSourceOpen();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.mediaSource.addEventListener(<span class="string">"sourceended"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      me.onMediaSourceEnded();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.mediaSource.addEventListener(<span class="string">'sourceclose'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      me.onMediaSourceClose();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.mediaSource.addEventListener(<span class="string">"error"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      me.onUpdataError();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.video=<span class="keyword">this</span>.createNewVideo();</span><br><span class="line">    <span class="keyword">this</span>.video.src=<span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">this</span>.mediaSource);</span><br><span class="line">    <span class="keyword">this</span>.video.play();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.sourceBuffer)&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.sourceBuffer.updating)&#123;</span><br><span class="line">    <span class="keyword">return</span>;<span class="comment">//上一块数据还在添加中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sourceBuffer.appendBuffer(dataBytes);<span class="comment">//添加数据</span></span><br><span class="line">  &#125;<span class="keyword">catch</span>(err)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createNewVideo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newVideo=<span class="built_in">document</span>.createElement(<span class="string">"video"</span>);</span><br><span class="line">    newVideo.id=<span class="string">"player"</span>;</span><br><span class="line">    newVideo.width=<span class="keyword">this</span>.videoWidth;</span><br><span class="line">    newVideo.height=<span class="keyword">this</span>.videoHeight;</span><br><span class="line">    <span class="keyword">return</span> newVideo;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//事件侦听</span></span><br><span class="line">  onMediaSourceOpen:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//DOMString可以通过转码获得</span></span><br><span class="line">    <span class="keyword">var</span> typeNmae=<span class="string">'video/mp4;codecs="avc1.42E01E,mp4a.40.2"'</span>;</span><br><span class="line">    <span class="keyword">var</span> issurpport=MediaSource.isTypeSupported(typeName);</span><br><span class="line">    <span class="keyword">this</span>.mediaSource.duration=<span class="keyword">this</span>.totalDuration;<span class="comment">//设置视频总时长</span></span><br><span class="line">    <span class="keyword">this</span>.sourceBuffer=<span class="keyword">this</span>.mediaSource.addSourceBuffer(typeName);</span><br><span class="line">  &#125;</span><br><span class="line">  onMediaSourceEnded:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"source ended"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  onMediaSourceClosed:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"cource close"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>以下是自己做的一个demo；MP4格式的文件未成功；webm格式的成功了；但是不能跨越</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;blob&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;video id=&quot;video&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var video = document.querySelector(&apos;video&apos;);</span><br><span class="line">var assetURL = &apos;http://172.16.70.106:8020/Demo/Demo1/audio/test2.webm&apos;;</span><br><span class="line">// Need to be specific for Blink regarding codecs</span><br><span class="line">// ./mp4info frag_bunny.mp4 | grep Codec</span><br><span class="line">var mimeCodec = &apos;video/webm;codecs=&quot;vorbis,vp8&quot;&apos;;</span><br><span class="line"></span><br><span class="line">if(&apos;MediaSource&apos; in window &amp;&amp; MediaSource.isTypeSupported(mimeCodec)) &#123;</span><br><span class="line">var mediaSource = new MediaSource();</span><br><span class="line">video.src = URL.createObjectURL(mediaSource);</span><br><span class="line">mediaSource.addEventListener(&apos;sourceopen&apos;, sourceOpen);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.error(&apos;Unsupported MIME type or codec: &apos;, mimeCodec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sourceOpen() &#123;</span><br><span class="line">console.log(this); // open</span><br><span class="line">var mediaSource = this;</span><br><span class="line">var sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);</span><br><span class="line">fetchAB(assetURL, function(buf) &#123;</span><br><span class="line">console.log(buf)</span><br><span class="line">console.log(sourceBuffer);</span><br><span class="line">sourceBuffer.addEventListener(&apos;updateend&apos;, function() &#123;</span><br><span class="line">console.log(mediaSource);</span><br><span class="line">mediaSource.endOfStream();</span><br><span class="line"></span><br><span class="line">video.play();</span><br><span class="line">console.log(mediaSource.readyState); // ended</span><br><span class="line">&#125;);</span><br><span class="line">sourceBuffer.appendBuffer(buf);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">function fetchAB(url, cb) &#123;</span><br><span class="line">console.log(url);</span><br><span class="line">var xhr = new XMLHttpRequest;</span><br><span class="line">xhr.open(&apos;get&apos;, url);</span><br><span class="line">xhr.responseType = &apos;arraybuffer&apos;;</span><br><span class="line">xhr.onload = function() &#123;</span><br><span class="line">console.log(xhr.response);</span><br><span class="line">cb(xhr.response);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于blob类型的理解&quot;&gt;&lt;a href=&quot;#关于blob类型的理解&quot; class=&quot;headerlink&quot; title=&quot;关于blob类型的理解&quot;&gt;&lt;/a&gt;关于blob类型的理解&lt;/h3&gt;&lt;p&gt;想下载一个视频时发现是个blob:src形式；不明白这个是个什么鬼，
      
    
    </summary>
    
      <category term="随手笔记" scheme="http://yoursite.com/categories/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="blob" scheme="http://yoursite.com/tags/blob/"/>
    
  </entry>
  
  <entry>
    <title>referenceType_1</title>
    <link href="http://yoursite.com/2017/07/06/referenceType-1/"/>
    <id>http://yoursite.com/2017/07/06/referenceType-1/</id>
    <published>2017-07-06T08:38:37.000Z</published>
    <updated>2018-11-26T04:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>在ECMAScript中，引用类型是一种数据结构，用于将数据和功能组织在一起。对象是某个特定引用功能的实例</p><h3 id="object类型"><a href="#object类型" class="headerlink" title="object类型"></a>object类型</h3><p>创建object实例的方式有两种：</p><ul><li><p>使用new操作符后跟Object构造函数</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name=<span class="string">"haohualiangshi"</span>;</span><br><span class="line">person.age=<span class="number">29</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用对象字面量的表示方法</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  name:<span class="string">"haohualiangshi"</span>,</span><br><span class="line">  age:<span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象字面量是向函数传递大量可选参数的的首选方式</p></li></ul><h3 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h3><p>js中数组的每一项都可以保存不同类型的数据。创建数组的基本方式有两种：使用Array构造函数，使用数组字面量表示法。</p><p>数组的存储方式有栈方法和队列方法：</p><ul><li>栈是一种LIFO（后进先出）的数据结构，栈的操作方法：push()和pop()方法，push方法可以接收任意数量的参数，把他们逐个添加到数组末尾，并返回修改后的数组长度。而pop方法则从数组末尾移除最后一项；并返回移除的项。</li><li>队列方法的访问规则是FIFO（先进先出）；队列是在列表的末端添加；在列表的前端移除项；其操作是用push方法在数组的末尾添加数组项；用shift方法移除数组的第一项并返回该项；另外数组还提供了unshift方法；其作用与shift方法相反；与push类似；在数组的前端添加任意个数组项并返回新的数组长度，使用shift和unshift方法可以从相反的方向模拟队列.</li></ul><p>数组中定义好的的重排序方法：</p><ul><li>reverse()  :翻转数组项的顺序</li><li>sort()  : 默认情况下sort方法是按升序排序的；注意；sort方法比较的是字符串：sort方法会调用每个数组项的toString；然后进行对比。该函数可以通过传递两个参数进行灵活的排序操作：如果第一个参数位于第二个参数之前则返回一个负数，如果两个参数相等则返回0，如果第一个参数位于第二个参数之后，则返回正数。</li></ul><p>操作方法：</p><ul><li><p>concat()方法可以基于当前数组中的所有项创建一个新的数组，他的参数可以传递一个或者多个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"#888"</span>];</span><br><span class="line">colors.concat(<span class="string">"#999"</span>,[<span class="string">"#333"</span>,<span class="string">"#999"</span>]);<span class="comment">//["red", "green", "#888", "#999", "#333", "#999"]</span></span><br></pre></td></tr></table></figure></li><li><p>slice()方法：它能够基于当前数组的一个或者多个项创建一个新数组。两个参数表示起始位置和结束位置；第二个参数可选</p></li><li><p>splice()方法：可以完成删除、插入和替换：该方法始终返回一个数组，该数组包含从原始数组中删除的项。无删除项则返回空数组。</p><ul><li><p>删除：需要指定两个参数；要删除的第一项的位置和要删除的项数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"yellow"</span>];</span><br><span class="line">colors.splice(<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//["red", "green"]</span></span><br></pre></td></tr></table></figure></li><li><p>插入：需要提供三个参数，起始位置、删除的项数和插入的任意项数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"yellow"</span>];</span><br><span class="line">colors.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">"#999"</span>,<span class="string">"#888"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors);</span><br></pre></td></tr></table></figure></li><li><p>替换：可以向指定的位置插入任意数量的项；并指定三个参数：起始位置、要删除的项数和要插入的任意数量的项</p></li></ul></li></ul><p>位置方法：两个位置方法：indexof()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和表示查找起点位置的索引；其中indexOf()从数组的开头向后查找；lastIndexOf()从数组的末尾向前查找；没有找到则返回-1。</p><p>迭代方法：es5定义了<strong>5</strong>种迭代方法。每个方法接收两个参数：要在每一项上运行的函数和（可选的）运行函数的作用域对象–影响this的值；传入这些方法中的函数会接收三个参数：数组项的值、该项在数组中的位置和数组对象本身；以下是五个迭代方法</p><ul><li><p>every():对数组中的每一项运行给定的函数，如果该函数每一项都返回true；则返回true</p></li><li><p>filter():对数组中的每一项运行给定函数；返回该函数会返回true的项组成的数组</p></li><li><p>forEach():对数组中的每一项运行给定函数，这个方法没有返回值</p></li><li><p>map()：对数组中的每一项运行给定函数；返回每次函数调用的结果返回的数组</p></li><li><p>some(): 对数组中的每一项运行给定函数；如果该函数对数组中的任意一项返回true则返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numArr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> everyResult=numArr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (item&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(everyResult);</span><br><span class="line"><span class="keyword">var</span> someResult=numArr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (item&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(someResult);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterResult=numArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (item&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(filterResult);</span><br><span class="line"><span class="keyword">var</span> mapResult=numArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (item &gt;<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mapResult);</span><br><span class="line"><span class="comment">//forEach没有返回值；能够对数组的每一项执行操作</span></span><br><span class="line">numArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item+<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>es5新增了两个归并方法：reduce()和reduceRight(),这两个方法都会迭代数组的所有项；然后构建一个最终返回的值。reduce()方法从数组的第一项开始；逐个便利到最后；而reduceRight()则从数组的最后一项开始；逐个便利到第一项。这两个方法都接收两个参数：一个在每一项上调用的函数和可做为归并基础的初始值（可选）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reduceArr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">reduceArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//四个参数分别是前一个结果值、当前值、项的索引和数组对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(cur);</span><br><span class="line">  <span class="keyword">return</span> prev+cur;</span><br><span class="line">&#125;);</span><br><span class="line">reduceArr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(cur);</span><br><span class="line">  <span class="keyword">return</span> prev+cur;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h3><p>通过new Date()来获取当前的时间的字符串；如果要获取特定日期；需要传入表示该日期的毫秒数‘为例；为了简化过程；js提供了两个方法Date.parse()和Date.UTC();</p><p>Date.parse()方法接收一个表示日期的字符串参数；然后尝试根据字符串返回对应的毫秒数；解析不成功则返回NaN</p><p>ES5中添加了Date.now()方法；返回调用该方法时日期和时间的毫秒数；日期做比较时调用valueof方法；日期比较的是毫秒数</p><h3 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h3><p>函数其实是对象；每个函数都是Function类型的实例，因此函数名实际上也是指向函数对象的指针。函数声明和函数表达式是有区别的：函数声明在解析时会提升；函数表达式则不会；必须先定义后使用</p><p>在函数内部有两个特殊的对象：arguments和this</p><ul><li><p>arguments拥有一个callee的属性，该属性是个指针，指向拥有这个arguments对象的函数，在非严格模式下使用，例如函数阶乘</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">factorial(<span class="number">5</span>);<span class="comment">//120</span></span><br></pre></td></tr></table></figure></li><li><p>函数的另外一个对象是this：this引用的是函数据以执行的环境对象（在网页的全局作用域中调用函数时this对象引用的就是不window对象</p></li><li><p>在非严格模式下es5规范化了另外一个函数对象的属性：caller属性保存着当前函数的函数的引用；如果在全局作用域中调用当前函数；他的值为null;在严格模式下使用caller或者arguments.callee.caller都会造成错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  inner();</span><br><span class="line">  <span class="built_in">console</span>.log(outer.caller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="built_in">arguments</span>.callee.caller);<span class="comment">//指向函数outer</span></span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure></li><li><p>函数还具有length和prototype属性：length属性表示形参的个数，prototype属性是保存他们所有实例方法的真正所在，该属性不可枚举</p></li><li><p>每个函数都包含两个非继承而来的方法：apply()和call()，这两个方法的用途是在特定的作用域中调用函数；并能扩展函数的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color=<span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">color</span>:<span class="string">"blue"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">sayColor.call(<span class="keyword">this</span>);</span><br><span class="line">sayColor.call(o);</span><br><span class="line">sayColor.call(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></li><li><p>es5还定义了bind()方法;该方法会创建一个函数的实例；其this值会被绑定到传给bind()函数的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color=<span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">color</span>:<span class="string">"blue"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objectColor=sayColor.bind(o);</span><br></pre></td></tr></table></figure></li></ul><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p>为了便于操作基本类型的值；js引入了三个特殊的引用类型；Boolean、Number和String。</p><p>Number类型提供了一些用于将数值格式化为字符串的方法：</p><ul><li>toFixed()方法会按照指定的小数位返回数值的字符串表示,该方法具有自动舍入的特性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10.005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>));<span class="comment">//10.01</span></span><br></pre></td></tr></table></figure><ul><li><p>toExponential()方法；该方法返回指数表示法；表示数值的字符串形式;接收一个参数用来表示小数位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">19</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li><li><p>toPrecision()可以根据参数的不同用恰当的字符串来表示数值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></li></ul><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>String对象的属性和方法也可以在所有的字符串中访问，string类型的每个实例都有length属性，表示字符串包含多少个字符</p><ul><li><p>charAt()和charCodeAt();这两个方法都接收一个表示字符索引位置的参数；charAt()返回给定位置的那个字符。charCodeAt()返回的是索引位置对应的编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test.charAt(<span class="number">2</span>));<span class="comment">//"l"</span></span><br><span class="line"><span class="built_in">console</span>.log(test.charCodeAt(<span class="number">2</span>))<span class="comment">//108</span></span><br></pre></td></tr></table></figure></li><li><p>concat()方法的作用同数组的concat方法相同，用于将一个或者多个字符串拼接起来，返回得到的新字符串；</p></li><li><p>基于子字符串创建新字符串的三个方法：slice()、substr()和substring();这三个方法都返回被操作字符串的子字符串，接收一个或者两个参数。第二个参数的区别是slice()和substring()指定的是字符串最后一个字符后边的位置(包头不包尾)。而substring()的第二个参数指定的则是返回字符的个数;如果不传第二个参数则默认截取到最后。这三个方法都对原始字符串无影响</p><p>这三个方法都是可以传入负值的；对负值的解析也不相同：slice()方法会将传入的负值与长度相加，substr()会将负值的第一个参数与长度相加；第二个参数转为0，substring会将所有的负值转为0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=<span class="string">"this is a test string"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test.substring(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//hi</span></span><br><span class="line"><span class="built_in">console</span>.log(test.slice(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//hi</span></span><br><span class="line"><span class="built_in">console</span>.log(test.substr(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//his</span></span><br></pre></td></tr></table></figure></li><li><p>indexOf()和lastIndexOf();从一个字符串中搜寻给定的字符串，然后返回给定字符串的位置；没找到则返回-1</p></li><li><p>trim()方法；这个方法创建一个字符串的副本，删除前置以及后置的所有空格并返回结果</p></li><li><p>字符串的大小写转换：js中有四个涉及大小写转换的方法：toLowerCase()、toLocaleLowerCase()、toUpperCase()、toLocalUpperCase()</p></li><li><p>字符串的模式匹配方法</p><ul><li><p>match()方法，在字符串上调用这个方法本质上与调用RegExp的exec()方法相同，match方法只接收一个参数，要么是个正则表达式，要么是个RegExp对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text=<span class="string">"cat,bat,sat,fat"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern=<span class="regexp">/.at/</span>;</span><br><span class="line"><span class="comment">//与 pattern.exec(text)相同</span></span><br><span class="line"><span class="keyword">var</span> matches=text.match(pattern);</span><br><span class="line"><span class="built_in">console</span>.log(matches);<span class="comment">//["cat", index: 0, input: "cat,bat,sat,fat"]</span></span><br></pre></td></tr></table></figure></li><li><p>search():该方法的唯一参数与match()相同；返回字符串中第一个匹配项的索引；未找到则返回-1</p></li><li><p>replace()方法：该方法接收两个参数，第一个参数可以是正则表达式或者一个字符串，第二个参数可以是个字符串或者函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text=<span class="string">"cat,bat,sat,fat"</span>;</span><br><span class="line"><span class="keyword">var</span> result=text.replace(<span class="string">"at"</span>,<span class="string">"ond"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//cond,bat,sat,fat</span></span><br><span class="line"><span class="comment">//替换所有需要使用正则的全局标志</span></span><br><span class="line">result=text.replace(<span class="regexp">/at/g</span>,<span class="string">"ond"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//cond,bond,sond,fond</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>split()方法：这个方法可以基于指定的分割符将一个字符串分割成多个字符串，并将结果放在数组中；该方法可以接收第二个参数用于截取数组的长度。</p></li><li><p>localeCompare()方法：这个方法比较两个字符串，并返回下列值中的一个</p><ul><li>如果字符串在字母表中应该排在字符串参数之前，则返回一个负数</li><li>如果字符串等于字符串参数，则返回0</li><li>如果字符串在字母表中的位置排在字符串参数之后，返回一个正数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue=<span class="string">"yellow"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">"brick"</span>));<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">"yellow"</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">"zoo"</span>));<span class="comment">//-1</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h2&gt;&lt;p&gt;在ECMAScript中，引用类型是一种数据结构，用于将数据和功能组织在一起。对象是某个特定引用功
      
    
    </summary>
    
      <category term="js教程总结" scheme="http://yoursite.com/categories/js%E6%95%99%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="引用类型" scheme="http://yoursite.com/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>es5-ver2.md</title>
    <link href="http://yoursite.com/2017/07/05/es5-ver2-md/"/>
    <id>http://yoursite.com/2017/07/05/es5-ver2-md/</id>
    <published>2017-07-05T09:04:50.000Z</published>
    <updated>2018-11-26T04:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的操作"><a href="#变量的操作" class="headerlink" title="变量的操作"></a>变量的操作</h2><ol><li><p>在使用引用类型操作时；js不允许直接访问内存的的位置，也就是说不能直接操作对象的内存空间，在操作对象时是操作的对象的引用</p><ul><li>复制基本类型的变量值时；会在变量对象上创建一个新值；然后把该值复制到新变量分配的位置上</li><li>复制引用类型时：其实是复制的副本的一个指针，该指针的指向与复制对象的指向相同</li></ul><p>函数的参数都是按值传递的；即把函数外部的值复制给函数内部的参数；函数的参数其实就是函数的内部变量；</p><ol start="2"><li>变量的检测：基本类型的变量用typeof来检测类型；引用类型的需要使用instanceof来判断是不是一个对象的实例；基本类型的变量使用instanceof返回false；</li></ol><h3 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h3><p>执行环境定义了变量或者函数有权访问的其他数据，每一个执行环境都有一个与之关联的<strong>变量对象</strong> ；当代码在一个环境中执行时，会创建变量对象的一个作用域链。作用域链保证了对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端始终是当前执行代码所在环境的变量对象；如果执行环境是个函数，则将其活动对象作为变量对象，活动对象最开始只包括一个变量，即arguments对象。</p><p>作用域链中的下一个对象来自包含（外部）环境，再下一个变量对象怎来自下一个包含环境；一直延续到全局执行环境；全局执行环境的对象始终都是作用域链的最后一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color=<span class="string">"blue"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColors</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> anotherColor=<span class="string">"red"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swapColors</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> tempColor=anotherColor;</span><br><span class="line">anotherColor=color;</span><br><span class="line">color=tempColor;</span><br><span class="line"><span class="comment">//三个变量都能访问到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//能访问两个变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只能访问全局变量</span></span><br></pre></td></tr></table></figure><p>内部函数可以通过作用域链访问外部函数的变量对象</p><ol><li>声明变量：使用var声明的变量会自动添加到最接近的环境中；如果再使用变量前未声明；该变量会被自动添加到全局环境；严格模式下初始化未声明的变量会报错。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量的操作&quot;&gt;&lt;a href=&quot;#变量的操作&quot; class=&quot;headerlink&quot; title=&quot;变量的操作&quot;&gt;&lt;/a&gt;变量的操作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在使用引用类型操作时；js不允许直接访问内存的的位置，也就是说不能直接操作对象的内存空间，在操作对
      
    
    </summary>
    
      <category term="js教程总结" scheme="http://yoursite.com/categories/js%E6%95%99%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="变量" scheme="http://yoursite.com/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>es5-ver</title>
    <link href="http://yoursite.com/2017/07/04/es5-ver/"/>
    <id>http://yoursite.com/2017/07/04/es5-ver/</id>
    <published>2017-07-04T06:52:19.000Z</published>
    <updated>2018-11-26T04:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量、作用域"><a href="#变量、作用域" class="headerlink" title="变量、作用域"></a>变量、作用域</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li><p>js的变量是松散类型的，即可以用来保存任何类型的数据</p></li><li><p>变量分为<strong>5</strong>种基本数据类型和<strong>1</strong>种复杂类型的：</p><ol><li>基本类型：Undefined、Null、Boolean、Number和String</li><li>复杂类型：Object，Object本质上是由一组<strong>无序</strong>的名值对组成</li></ol></li><li><p>在es 5中是可以使用<strong>typeof操作符</strong>进行数据类型的检测，其返回值：undefined、boolean、string、number、object、function。</p></li><li><p>在使用数值转换时的三种方法</p><ol><li>Number()函数的转换规则，在传入值不同下返回;<ul><li>boolean值的true和false直接转换为1和0</li><li>数值直接返回传入值</li><li>null值返回0</li><li>undefined返回NaN</li><li>字符串：<ol><li>字符串全为数字；将该字符串转为十进制；eg;”123”转为123，“0123”转为123</li><li>如果字符串包含浮点格式“1.5”转为浮点值1.5，同样忽略前边的0；但是如果不是标准的浮点格式；会转为NaN;</li><li>如果字符串是标准的十六进制格式“0xaf”则转为十进制175</li><li>字符串为空转为0</li><li>其他不符合该规则的字符串转为NaN</li></ol></li><li>对象：传入值是对象先调用valueof()方法；依照上述规则转换</li></ul></li><li>parseInt()函数容错比Number函数高；解析时如果第一个字符不是数字或者正负号，该函数会返回一个NaN，该函数第二个参数用来表示装换时使用的基数</li><li>parseFloat()函数在在解析一个没有小数点或者小数点后全为零的字符点时返回的是个整数；</li></ol></li><li><p>字符串生成后时不可变的；null和undefined不具有toString()方法。可以使用String()方法；在数值调用toString方法可以传参数用来指定在转换时的基数；</p></li><li><p>js中的对象其实就是一组数据和功能的集合：object的每个实例都具有下列属性和方法</p><ol><li>constructor：保存着用于创建当前对象的函数</li><li>hasOwnProperty(propertyName)用于检测给定的属性在当前实例对象中是否存在；而不是在实例的原型中</li><li>isPrototypeOf(object):用于检查传入的对象是否是当前对象的原型；</li><li>toLocaleString()</li><li>toString()</li><li>valueOf()</li></ol></li><li><p>操作符</p><ol><li>一元操作符：有前置型和后置型；这4个操作符对任何值都适用</li><li>逻辑非操作符(!)：遵循规则<ul><li>操作数是对象；返回false</li><li>操作数的空字符串返回true</li><li>非空字符串返回false</li><li>0返回true；非0数值返回false</li><li>null、undefined、NaN返回true</li></ul></li><li>逻辑与(&amp;&amp;)，具有短路效应，即第一个操作数能够决定结果，那么不会对第二个操作数求值；逻辑与操作可以应用任何类型的操作数；而不仅仅是一个布尔值；在有一个操作数不是布尔值的情况下；逻辑与的返回值不一定是布尔值；遵循规则如下：<ul><li>第一个操作数是对象；返回第二个操作数</li><li>在第一个操作数逻辑值为true时返回第二个操作数，否则返回第一个操作数</li></ul></li><li>逻辑或(||),逻辑或也是短路操作符，第一个操作数为true就不会对第二个操作数求值；如果有一个操作数不是布尔值，那么逻辑或也不一定返回布尔值</li><li>关系操作符：关系操作符分为小于(&lt;)、大于、小于等于、大于等于，在使用关系操作符时注意隐式转换<ul><li>数值的优先级比较高；如果一个操作数是字符串或者布尔值和一个数值比较；则先将字符串转为数值，注意：该转换方法调用的是Number()方法；然后进行比较；如果一个操作数是对象，则先调用valueof方法，没有valueof方法则调用toString方法</li><li>当两个操作数都是都是字符串；则表两个字符中对应位置的字符的字符编码值</li><li><strong>任何操作数与NaN比较都是false</strong> </li></ul></li><li>相等操作符：相等和不相等、全等和不全等<ol><li>相等和不相等是先转换再比较，，称为<strong>强制转型</strong> ，其规则与比较运算符区别如下<ul><li>null和undefined相等，如果两个操作数都是对象；则比较这两个对象是不是指向的同一个对象</li></ul></li><li>全等和不全等（===、!==）不转换就进行比较，类型和值全部相等才返回true</li></ol></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数的参数在内部是用一个伪数组arguments表示的；函数的length属性是表示形参的个数；arguments.length表示实参的个数；在js中函数没有才重载；函数在未指定返回值的情况下默认返回undefined</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量、作用域&quot;&gt;&lt;a href=&quot;#变量、作用域&quot; class=&quot;headerlink&quot; title=&quot;变量、作用域&quot;&gt;&lt;/a&gt;变量、作用域&lt;/h2&gt;&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="js教程总结" scheme="http://yoursite.com/categories/js%E6%95%99%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="变量" scheme="http://yoursite.com/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>blogOfHexo</title>
    <link href="http://yoursite.com/2017/06/30/blogOfHexo/"/>
    <id>http://yoursite.com/2017/06/30/blogOfHexo/</id>
    <published>2017-06-30T10:48:35.000Z</published>
    <updated>2018-11-26T04:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客搭建教程"><a href="#博客搭建教程" class="headerlink" title="博客搭建教程"></a>博客搭建教程</h2><blockquote><p>   参考链接：<a href="https://smartbeng.github.io/2017/03/26/blogFinish/" target="_blank" rel="noopener">https://smartbeng.github.io/2017/03/26/blogFinish/</a></p></blockquote><ol><li>安装Node.js\Git。并在git上创建仓库：<a href="https://github.com/haohualiangshi/haohualiangshi.github.io" target="_blank" rel="noopener">https://github.com/haohualiangshi/haohualiangshi.github.io</a>，要求仓库名必须和用户名相同。即必须是userName.github.io;我的userName是haohualiangshi</li><li><p>安装Hexo工具</p><ol><li>在任意盘创建Hexo文件（必须是Hexo文件命名）；在Hexo文件夹的父级打开git命令行；运行<code>$ npm install -g hexo</code>;</li><li>打开Hexo文件夹；运行<code>hexo init</code></li><li>运行<code>hexo g</code>用来生成页面；运行<code>heox s</code>启动本地服务</li><li><p>hexo 常用命令</p><ol><li><p><code>hexo new page &quot;pageName&quot;</code>新建文件夹。自动生成在source目录下</p></li><li><p><code>hexo new &quot;postName&quot;</code>新建md文件；在source下的_post目录下；</p></li><li><p>hexo运行的命令生成的页面文件是放在public文件夹下；新建一个文件夹用来往github上推送本地的文件。eg:我本地新建的是.deploy文件夹；克隆仓库文件,在hexo目录下运行<code>git clone https://github.com/haohualiangshi/haohualiangshi.github.io .deploy/storm.git.github.io</code>或者打开storm.git.github.io文件夹直接执行复制指令</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">cp -R public/* .deploy/storm.github.io</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update&quot;</span><br><span class="line">git push origin master -u</span><br></pre></td></tr></table></figure><ol><li>将上边文件类型命名为.sh文件类型；点击之后自动完成写入的指令完成上传；代码的意思：清除缓存、生成静态文件、将静态文件中的所有文件复制到.deploy/storm.github.io文件夹下、完成git的添加上传；</li></ol></li></ol></li></ol></li><li><p>关于主题的更换网上的文件比较多；我使用的是next主题；参考的教程<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;博客搭建教程&quot;&gt;&lt;a href=&quot;#博客搭建教程&quot; class=&quot;headerlink&quot; title=&quot;博客搭建教程&quot;&gt;&lt;/a&gt;博客搭建教程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   参考链接：&lt;a href=&quot;https://smartbeng.github
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
